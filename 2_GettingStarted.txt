2.1-3:

LINEAR-SEARCH(A, v)

check = 0
for i = 1 to A.length
	if A[i] == v:
		check += 1
		return i
return NIL

2.2 Analyzing Algorithms

Predicting the resources that the algorithm requireds.
The resources include:
	- Computational time
	- Memory
	- COmmunication band-width
	- Computer Hardware
Generic one-processor, random-access machine (RAM) model of computation as the implementation technology. No concurrent operations. 

Treat computation of 2^k as a constant-time operation when k is a smal enough positive integer..

Analyzing an algorithm using RAM model requires the following tools:
	- combinatorics
	- probability theory
	- algebraic dexterity
	- idetifying the most signigicant terms in a formula

Analysis of insertion sort
Can take different amounts of time to sort two input sequences of the same size on how sorted they already are
Input size = Defintion dependon on the problem being studied. Usually means number of items in the input (for sorting or discrete Fourier transforms). Could mean total number of bits (for multiplying two integers). 
Running time = number or operations or "steps" executed. 

Order of growth
	Ignore actual cost of each statement
	Rate of rowth, or Order of growth is of prime interest
	Insertion sort has a worst-case running time of theta of n-squared
	One algorithm is more efficient than another if its worst case running time as a lower order of growth
	Large number of inputs

2.3 Designing Algorithms

Insertion sort - incremental approach

Divide and conquer:
Running times are often easily determined
Uses recursion
Break a problem into several subproblems that are similar to the original problem but smaller in size, solve the subproblems recursively, and then combine these solutions to create a solution to the original problem. 

	- Divide the problem intoa number of sub problems that are smaller instances of the same problem
	- Conquer the subproblems by solving them recursively. If the subproblem sizes are small enough, however, just solve the subprobems in a straightforwards manner
	- Combine the solutions to the subproblems into the solution for the original problem

The merge sort algorithm foolows the paradigm

	- Divide: Divide the n-element sequence to the sorted into two subsequences of n / 2 elements each
	- Conquer: Sort the two subsequences recursively using merge sort
	- Combine: Merge the two sorted subsequences to produce the sorted answer


The recusion "bottoms out" when the sequence to be sorted has length 1
The key operation of the merge sort algorithm is merging of two sorted sequences in the "combine" step.

The merge is done by calling MERGE(A, p, q, r) where
	A - is the array
	p, q, and r are indices into the array
	Assumption is made that A[p..q] and A[q + 1..r] are sorted
	It merges them to a single sorted array A[p..r]
	The marge takes time theta(n), n = r - p + 1

Pseudocode:

MERGE(A, p, q, r)

	n1 = q - p + 1 // length of array A[p..q]
	n2 = r - q // length of array A[q + 1..r]
	let L[1..n1 + 1] and R[1..n2 + 1] be new arrays // create new arrays
	for i = 1 to n1 
		L[i] = A[p + i - 1]
	for j = 1 to n2
		R[j] = A[q + j]
	L[n1 + 1] = special
	R[n2 + 1] = special

	i = 1
	j = 1
	for k = p to r
		if L[i] <= R[j]
			A[k] = L[i]
			i = i + 1
		else 
			A[k] = R[j]
			j = j + 1

MERGE-SORT(A, p, r)
	if p < r
		q = [(p + r) / 2]
		MERGE-SORT(A, p, q)
		MERGE-SORT(A, q + 1, r)
		MERGE(A, p, q, r)
